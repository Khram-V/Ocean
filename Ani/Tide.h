#ifndef Tide_hxx
#define Tide_hxx
//
//   Описание информационной системы для приливных гармонических постоянных
//
#include "..\Type.h"
                            //
extern double Tidal_Quad[]; // Список приливных частот (°/час)
extern Real   Time_Zone;    // Часовой пояс на восток от Гринвича
extern  int  Number_Tides;  // Количество определенных мореографов
extern Field   Tide_Map,    // Map изменяется в World_Map
               Tide_Plc;    // Plc текущее активное поле
#define FTitle "~Tide\xF8"  // -°
//
//      Tide.cpp - Собственно математический комплекс
//                           ( без лишних украшений )
int TideFileRead
          ( const char* N=0 );  // Безусловное считывание приливной базы данных
                                //   ret - количество выбранных мореографов
int TideDefault( int );         // Установка текущего мореографа по номеру в списке
                                //   ret - количество активных гармоник
int TideDefault( const char* ); // Поиск и установка мореографа по его имени
                                //   ret -//-, если ошибка, то на выходе -1
Point TideGeo( int );           // Процедура выборки географических координат
                                //
void TideDataClose();           // Расчистка приливной база данных в памяти
//
// Следущие программы получают доступ только к текущему блоку гармоник
//
void TideMario     // Выборка информации для Mario
( char* Ident,     // Название пункта наблюдения       [21]
  Real& Lon,       // Географическая долгота
  Real& Lat,       //  и широта                        [°]
  Real& Mid        // Средний многолетний уровень моря [cm]
);
//    TideEdit.cpp    - Набор сервисных графических утилит
//
//    Признаки Tide.W - 0x8000 - 1: мореограф вне расчетной карты
//                      0x4000 - 1: точка исключена из расчета
//                      0x0002 - 0: приливная волна еще не у границы
//                      0x0001 - 1: координаты выводят на берег
//             Tide.Cs - используется для предыдущего уровня моря
//
int TideSetup();   // Выбор блока гармонических постоянных из списка
                   //     в интерактивном режиме
struct Tide        // Описание приливного ряда с гармоническими постоянными
{                  //
 int  Len;         // Количество гармонических постоянных
 char Name[28];    // Название пункта наблюдения (+8 на выравнивание структуры)
 long  Day;        // Юлианская дата
 Real  Fi,La,      // Географические координаты в градусах
          Co,      // Средний уровень моря (ТНГ)
          Ch,      // Критический уровень моря
          Cs;      // Коэффициент пересчета на высоту цунами
 unsigned sW;      // Слово признаков   / = 48 байт
 char *H;          // [L]     Идентификатор приливной волны
 Real *C;          // [L•2+1] Входные гармонические коэффициенты

 void allocate( size_t ); // Распределение памяти для списка волн
 void free();             //
 int TideSeries           // Построение приливного ряда ( ret<0 ? ошибка:N )
 ( Real *Y, int N,        // Выходной ряд и его длина
   Real Dt,               // Шаг во времени для выходного ряда ( час )
   long Day=0L,           // Юлианская дата
   Real Time=-1.0         // Время начала процесса             ( час )
 );
 Real TidePoint( long=0,double=-1 ); // Значение уровня в одной точке
 //
 //    Следующие программы обращаются к графическому окружению
 //
  Tide& Edit();                // Создание или редактирование одной записи
 //void Graph( int,long );     // Изображение всех активных приливных рядов
  Tide& Draw(bool,long,Real);  // План приливов на географической карте
};                             //
extern Tide *List_of_Tide;     // Список приливных записей
extern Tide *Current_Tide;     // Текущий указатель приливного описателя
extern bool Mario_Title( char* );
                               //
#ifndef __Type_h__             // Здесь нет описаний программ, которые
typedef unsigned short fixed;  // имеют доступ к графическому сервису
typedef unsigned char byte;    //
        double onetime();      // текущее время в часах
        long   julday();       // юлианская дата
        long   julday( int,int,int );
        void   julday( long,int&,int&,int& );
        void* Allocate( size_t,void* );
        char* scpy( char*, const char*,int );
        void Break( const char[],... );
#endif
#endif
