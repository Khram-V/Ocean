//
//      Tsunami.hxx                                     /90.11.05/
//      Объявление глобальных имен
//
#ifndef _Tsunami_hxx
#define _Tsunami_hxx
#include "..\Ani\Depth.h"
        //
        //! WaveAs:   1 ¦ Задан период входящей волны
        //            2 ¦ Отслеживается протяженность граничной волны
        //            4 ¦ Учет геопотенциала
        //            8 ¦ На входе стохастический процесс Wt+Rand( Wk );
        //         1.00 ¦ Spherical Earth    \ .
        //         2.00 ¦ Coriolis  Forces    \ Дополнительные
        //         4.00 ¦ Viscosity Friction  / элементы вычислений
        //         8.00 ¦ Atmosphere Cyclone /
        //        10.00 - Признак запуска процесса записи мореограмм
        //        20.00 - Признак слияния боковых границ (Земная сфера) - искл.
        //! VideoM:   1 - Время на экране в абсолютных отсчетах
        //            2 - Изображение только что обновлено
        //            4 - Вывод (или нет) изолиний уровня
        //            8 - свето-теневая закраска уровней моря
        //           xC = 8+4 - свето-теневая раскраска + контуры уровней
        //           10 - Берег изображается контуром или закраской
        //           20 - Вывод потоков течения, иначе скоростей
        //           40 - 3d-style укрытые или обычные горизонтальные профили
        //         1.00 - Активизация меню Service
        //        20.00 - Прорисовка уровней в Mario-точках
        //        40.00 - Подпись времен и экстремальных величин
        //
        // Статический прилив определяется как: Hл=0.54м, Hс=0.25м.
        // Периоды: средний солнечный 15°/ч
        //
        // Давление: 10.33 м.воды при 0°c.
        //           760.0 мм.рт (x) 13.595(0°c)-13.546(20°c) мм.воды
        //           101.325 кПа (x) 101.97 ( 1кПа ў 1дм водного столба )
        //      min( 0.93ат = (  684мм.рт) ) :  +72см.воды
        //      max( 1.10ат = (808.7мм.рт) ) : -103см.воды
        // Плотность:        [ кг/м3 ]
        //    Воздух =   1.425 (-25°c)    0.946 (100°c)
        //               1.2928(  0°c)    0.456 (500°c)
        //               1.205 ( 20°c)    0.276(1000°c)
        //     + Пар =   0.598 (100°c)
        //      Вода = 998.841 (  0°c)
        //             999.973 (3.98°c)
        //             998.203 ( 20°c)
        //      Лед  = 916.8   (  0°c)
        // ~~~~~~~~~~~ //
struct METEO           // Описание одной опорной точки Метео-события
{                      // ----------------------------------------------
 Point G;              // Географические координаты точки           [градусы]
 Real  T,              // Время данного события                     [секунды]
       R,              // Размер (радиус) циклона                     [метры]
       H,              // Давление как уровень водного столба         [метры]
       W,              // Максимальная скорость в вихре циклона       [м/сек]
       Avs;            // Коэффициент скоростного напряжения              [ў]
};                     //
                       // Структура данных вычислительного эксперимента
class TWave//: Depth   // ==============================================
{                      // 1: Исходные данные и размерения батиметрии
 Event Instant;        //      Момент времени для физического процесса  [час]
 Real  Tstep,Tlaps,    //      Расчетный шаг и отсчет времени от начала [сек]
       Dx,Dy,          //--    Шаг сетки                               [метр]
       DZ,             //      Прибрежная глубина                   [cm,dm,m]
       dT;             //      Дискретность записи мореограмм           [сек]
                       // 2: Управление расчетами и изображением
 Real  St,             //      Заданный интервал до нового изображения
       Rt;             //      Интервал времени для точек рестарта      [час]
 Real  Dv;             //      Глубина для представления уровня моря      [m]
 int   Kt,             //      Счетчик расчетных шагов от начала эксперимента
       My,Mx,          //--    Общие размерности для всех расчетных массивов
       Nmp,            //--    Количество мореографных постов наблюдения
       Sp,             //      Интервал линий между профилями волн
       Fx,Fy;          //      Шаги для прорисовки векторов потоков и течений
 unsigned WaveAs,      //      Сигналы по отработке внешнего возмущения
          VideoM;      //      Параметры графических иллюстраций
                       // 3: Блок приливных режимов
 int   Tk;             //      Номер станции в граничных условиях
 Real  Ta,             //    - Амплитудный коэффициент для всех гармоник
       To;             //    - Смещение фазы от начала процесса
                       // 4: Начальные и граничные условия
 Basis We, Ve;         //      Пакет тензорной геометрии
 Point Wo, Vo,         //      Координаты центра очага                 [метр]
       Ws, Vs,         //      Размеры очага волны цунами              [метр]
       Sun,Moon;       //      Координаты Солнца и Луны              [радиан]
 Real  Kvs,            //      Коэффициент вязкости                        []
       W0, V0,         //      Отсчет Времени для запуска процесса      [сек]
       Wk, Vk,         //      Состав пакета синусоидальных волн
       Wa, Va,         //      Амплитуда прогрессивной волны           [метр]
       Wt, Vt,         //      Расчетный период|длина волны        [сек|метр]
       Wc, Vc,         //      Направление для входящей волны          [град]
       Mag,Glide;      //      магнитуда землетрясения и уклон морского дна
                       // 5: Параметры атмосферного циклона
 METEO aM;             //      Текущие параметры атмосферного циклона
 int   Na;             //      Количество опорных точек циклона
// long aD;            //      Юлианская дата
// Real aT;            //      и время для запуска циклона              [час]
                       // 6: Задание расчетных полей и векторов
 Real  ** Dp,          //      Рабочая копия батиметрического массива [метр+]
       ** Hg,          //      Превышение уровня моря                  [метр]
       ** Uy,          //      Поток возмущенной жидкости              [m¤/c]
       ** Ux,          //      U = H•V                                 [m¤/c]
       **_Fs,**_Fc,    //      Широта для поправки sin(Fi)->cos(Fi)     [рад]
       **_La,          //      Долгота астрономии с ЗП поправкой        [рад]
       ** Fa,          //      Поле атмосферного давления              [метр]
       ** Hf,          //      Поле геопотенциала заполняется в Espaso
       *mxH,*mnH,      //      Экстремальные уровни в точках Mg        [метр]
       *mFl,*aFl,      //      Максимальный поток и его направление
       *wTm,*mTm;      //      Время начала регистрации, экстремум волны
 MARIO *Mg;            //      Вектор координат точек наблюдения
 METEO *Ma;            //      Список базисных точек маршрута циклона
public:
      ~TWave();        // Destructor
  void Start();        // Constructor
  bool Interrupt();    // Опрос выдачи команд с терминала
  void Mariom();       // Запись мореограмм и протокола
  void HBound();       // Граничные условия
  void ESpaso();       // Собственно математика численного моделирования
  void EMeteo();       // Решение задачи о воздействии циклона
  void EGraph( bool ); // Визуализация решения на терминале: 1 - принудительно
private:               //
  void New_Initial();  // Подготовка решения на вновь заданной карте
  void Time_Step();    // Определение расчетного шага во времени
  void FreeTemp();     // Освобождение обновляемых массивов
  void Shadow( Real ); // Картинка в цвете с указанием экстремума
  int  Period();       // Определение волны заданной периодом во времени
  int  Source();       // Начальные условия задаются в форме очага цунами
  int  SMeteo();       // Построение траектории движения метео-циклона
  void MarioTide();    // Процедура генерации приливов из мореографных точек
  void save   (){}     // Сохранение и                       -- LW_Waves_check
//int  restore(){ return 1; }     -- восстановление расчетных данных
//
//   Расчет координат Солнца и Луны относительно Гринвича и экватора
//
  void Init_Sun_and_Moon( _Event );                // Юлианская дата и время
  Real Geo_Sun_and_Moon( Real Fs,Real Fc,Real La );// Астрономический потенциал
                                   // ------------ //
  Real Wave( bool,Real,Real );     // Форма волны
                                   //
  void Print_Time();               // Процедура вывода времени процесса
  void Edit_Chart();               // Географическое редактирование
  int  Mario_Init();               // Попытка запуска вычислений
  int  Initial_Mode_and_View(int); // Запрос режимов счета и изображения
  void Print_the_Time();           // Отметка текущего времени процесса
  void WaveIn_state( fixed Firs ); // Состояние процесса вычислений
                                   //
  int  Picture();                  // LW_InitSurf.cpp
 Point Bottom_Gradient( Point );   // Градиент поверхности грунта морского дна
  void Length_or_Period( bool A ); // Выбор при позиционировании
  void Period_Arrow();             // Направление внешней волны
  int  Seismic_Source();           // Варианты пространственных очагов цунами
  int  Seismic_Meteo( _Event Tsm,_Point Geo, Real M, Real H );
                                             // LW_Meteo_Init
  void Meteo_Marks();                        // Отметка всего маршрута
 Real  Atmosphere_Level ( int y,int x );     // Профиль атмосферного давления
 Point Atmosphere_Stress( int y,int x );     // и придонного ветра
                                             // LW_A_HBound
 Real DiffHeigh( Real C, int y,int x );      // Учет граничных условий
};
//     Профили атмосферного давления и скорости ветра
//
inline Real Pressure_Profile( _Real arg )           //
{ if( arg>=0 && arg<=1.0 )                          // F[0:1](0:1)
//    return (cos(arg*M_PI)+1)*exp( -arg*arg )/2.0;
//    return cos( 3*arg*arg*M_PI_2 )*exp( -arg*arg );
//    return ( cos( arg*M_PI )+1.0 )/2.0;
      return arg*arg*(arg/3.0-0.5)*6.0+1.0;         //  =_   _=
      return 0.0;                                   //    \ /
}                                                   //     ~
inline Real Wind_Profile( _Real arg )               //   _
{ if( arg>=0.0 && arg<=1.0 )                        //  / \     _
      return arg*(arg*(arg-2.0)+1.0)*6.75;          // =   \   =
      return 0.0;                                   //      \ /
}                                                   //       ~
void Meteo_Mark( METEO& );   // используется в процессе расчетов под метеоочаг
//void Macroseismic( Real Mag, Point &Size, Real &Amp );  // LW_InitSurf
#endif
